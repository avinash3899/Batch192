Core-java
jdbc,hibernate
servlet,jsp
spring
restful webservices
springboot
angular +spring boot
software requirement 
1)eclipse  2)tomcat server-9  3)Oracle 10xe 4)Nodejs
-----------------------------------------------------------------------
Features of Java
------------------------
1)Java is purely OOPS (Object Oriented Programming Language).
In this we have class and Object.
2)In java we can develop standalone application,web application,network application and mobile application.
3)Java is simpler than c and c++ as we don't have pointer concept.
4)we have constructor(memory blocks are created) in java but no destructor(memory blocks are deleted).
In java there is automatic garbage clearence.
5)Java is a high level language,it is potable and scaleable.
6)In java we don't have multiple Inheritance.In that case we use Interface which support multiple Inheritace.
7)java is platform independent.
8)java is casesensitive.
--------------------------------------------------------------------------
Data types :-
primative datatypes.
-----------------------------
1)byte ---1 byte 
2)short ---2 bytes
3)int ---4 bytes
4)long ---8 bytes
5)float ---4 bytes
6)double ---8 bytes
7)char ---2 bytes
8)boolan ---1 bit
-------------------------------
derived datatypes
----------------------------
1)String 
2)array
3)class
----------------------------------------
Operators
---------------------
1)Unary operator
i++,i--,++i,--i
---------------------------------
2)Binary operator
a)Arthmatic : +,-,*,/,%(modulus/reminder)
b)logical: ||,&&
c)relational/comparative:<,>,<=,>=,==,!=
d)assignment :- =
e)Bitwise :-<<,>>,nor
-------------------------------------------------
3)Ternary operator  :- ?,:
---------------------------------------------------------------
Access specifier
--------------------------
1)private :-If we declare variables and methods as private we can access it within the class only.

2)public:-If we declare variables and methods as public we can access it within the class ,outside the class and also outside the package.

3)protected:-If we declare variables and methods as proteted we can access it within the class ,outside the class which is inherited(parent class and child class).

4)default:-If we declare variables and methods as default  we can access it within the class and outside the class but not out side the package.
-----------------------------------------------------
package -------class-----methods
we have some predefined packages ie
1)java.lang;
2)java.util;
3)java.io;
-------------------------------------------------
For java we have to install jdk1.16 latest (java development kit)
jre1.16 it is java runtime environment.
jdk is platform dependent means jdk is different for unix,window or Mac.
we have to save the file with .java extention.we have compile it using jit compiler(Just in time ).
we get the compiled file as .class file .it is in byte code.It is platform independent.
* we have to save the file with the <class name>.java
--------------------------------------------------------------------------------------
Program-1
------------------
package org.Monday;

public class Second 
{
public static void main(String[] args) 
{
	byte a=10;
	short b=20;
	int c=30;
	long d=40;
	float e=50.4f;
	double f=60.7;
	char g='a';
	String h="apple";
	System.out.println(a+"   "+b+"   "+c);
	System.out.println(d+"   "+e+"   "+f);
	System.out.println(g+"   "+h);
	}
}
----------------------------------------------------------------
Program-2
--------------------------
package org.Monday;
import java.lang.*;//default package
import java.util.*
public class Second 
{
public static void main(String[] args) 
{
	Scanner ob=new Scanner(System.in);//this is to take input
	System.out.println("enter 2 nos");
	int a=ob.nextInt();//to accept the integer values
	int b=ob.nextInt();
	int c=a+b;
	System.out.println("the sum is "+c);
	}
}
---------------------------------------------------------
Program-3
--------------------
package org.Monday;
import java.lang.*;//default package
import java.util.*
public class Second 
{
public static void main(String[] args) 
{
	Scanner ob=new Scanner(System.in);//this is to take input
	System.out.println("enter 2 nos");
	float a=ob.nextFloat();//to accept the integer values
	float b=ob.nextFloat();
	float c=a+b;
	System.out.println("the sum is "+c);
	}
}
--------------------------------------------------
Program-4
-------------------
package org.monday;
import java.lang.*;
import java.util.*;
public class Firstjava 
{
public static void main(String[] args) {
    Scanner ob = new Scanner(System.in);//to take the input values
    System.out.println("Enter numbers");
    float a = ob.nextFloat();
    float b = ob.nextFloat();
    float c = ob.nextFloat();
    float d = ob.nextFloat();
    float e = ob.nextFloat();
    float f = a+b+c+d+e;
    float g = (a+b+c+d+e)/5;
    System.out.println("The sum is "+f);
    System.out.println("The avg. is "+g);
}
}
-------------------------------------
Program-5
Find greatest of 2 nos.
-------------------------------------
package org.Monday;
import java.lang.*;//default package
import java.util.*
public class Second 
{
	public static void main(String[] args) 
	{
		Scanner ob=new Scanner(System.in);//this is to take input
		System.out.println("enter 2 nos");
		float a=ob.nextFloat();//to accept the integer values
		float b=ob.nextFloat();
		if(a>b)
			System.out.println("the greatest is "+a);
		else
			System.out.println("the greatest is "+b);
	}
}


--------------------------------------------------------------
Program-6
----------------------
wa.p to enter 3 nos and find the greatest
---------------------------------------------------------------------------------
package org.Monday;
import java.lang.*;//default package
import java.util.*
public class Second 
{
	public static void main(String[] args) 
	{
		Scanner ob=new Scanner(System.in);//this is to take input
		System.out.println("enter 3 nos");
		float a=ob.nextFloat();//to accept the integer values
		float b=ob.nextFloat();
		float c=ob.nextFloat();
				if(a>b && a>c)
			System.out.println("the greatest is "+a);
		else if(b>a && b>c)
			System.out.println("the greatest is "+b);
		else
			System.out.println("the greatest is "+c);
	}
}


-----------------------------------------------------------------------
Program-7
---------------------
package org.Monday;
import java.lang.*;//default package
import java.util.*;
public class Second 
{
	public static void main(String[] args) 
	{
		Scanner ob=new Scanner(System.in);//this is to take input
		System.out.println("enter 5 nos");
		int a[]=new int[5];//array of 5 integer
		for(int i=0;i<5;i++)
			a[i]=ob.nextInt();
		System.out.println("the 5 nos are ");
		for(int i=0;i<5;i++)
			System.out.println(a[i]);
	}}
---------------------------------------------------------------------------
Program-8
----------------------------
package org.Monday;
import java.lang.*;//default package
import java.util.*;
public class Second 
{
	public static void main(String[] args) 
	{
		int sum=0;
		Scanner ob=new Scanner(System.in);//this is to take input
		System.out.println("enter 5 nos");
		int a[]=new int[5];//array of 5 integer
		for(int i=0;i<5;i++)
		{
			a[i]=ob.nextInt();
			sum=sum+a[i];
		}
		System.out.println("the 5 nos are ");
		for(int i=0;i<5;i++)
			System.out.println(a[i]);
		System.out.println("the sum of 5 nos is "+sum);
			}
	}
---------------------------------------------------------------------------
Program-9
----------------------
package monday;
import java.util.Scanner;
public class OddEven {
    public static void main(String arg[]) {
        
        Scanner num=new Scanner(System.in);
        System.out.println("Enter five numbers");
        int a[]=new int[5];
        for(int i=0;i<5;i++)
        {
            a[i]=num.nextInt();
        
        }
        System.out.println("THe EVEN numbers are");
        for(int i=0;i<5;i++)
        {
            if(a[i]%2==0)
            {  
                System.out.println(a[i]);  
            }  
            
        }
        System.out.println("THe ODD numbers are");
        for(int i=0;i<5;i++)
        {
            if(a[i]%2!=0)
            {  
                System.out.println(a[i]);  
            }  
            
        }
        
    }
}
-------------------------------------------------------------------------------
class and Object 
----------------------------
class :- It is a collection of variables and methods.
It is a blue print of an object.It is also called as object factory.
------------------------
Object :- it is an reference pointer to the class.
By an object we can access the variables and methods of a class.
----------------------------------------------------------------------------------------
program-10
----------------
package org.Monday;
import java.lang.*;//default package
import java.util.*;;
public class Second 
{
	int rollno;
	String name,address;
	void input()
	{
		Scanner ob=new Scanner(System.in);
		System.out.println("enter rollno,name and address");
		rollno=ob.nextInt();
		name=ob.next();
		address=ob.next();
	}
	void display()
	{
		System.out.println("the rollno is "+rollno);
		System.out.println("the name is "+name);
		System.out.println("the address is "+address);
		
	}
	public static void main(String[] args)
	{
		Second obj=new Second();
		obj.input();
		System.out.println("The rollno is "+obj.rollno);
		obj.display();
	}
}
	
------------------------------------------------
Program-11
--------------------
//Array of objects 
package org.Monday;
import java.lang.*;//default package
import java.util.*;;
public class Second 
{
	String rollno;
	String name,address;
	void input()
	{
		Scanner ob=new Scanner(System.in);
		System.out.println("enter rollno,name and address");
		rollno=ob.nextLine();
		name=ob.nextLine();
		address=ob.nextLine();
	}
	void display()
	{
		System.out.println("the rollno is "+rollno);
		System.out.println("the name is "+name);
		System.out.println("the address is "+address);
		
	}
	public static void main(String[] args)
	{
		Second[] obj=new Second[3];
		for(int i=0;i<3;i++)
		{
			System.out.println("Enter data for Student no "+(i+1));
		obj[i]=new Second();//new object will be created each time	
		obj[i].input();
		}
		for(int i=0;i<3;i++)
		{
			System.out.println("Data of Student no "+(i+1));
		obj[i].display();
		}
	}
}

-----------------------------------------------------------------------------------------
constructor vs method:-
what is a constructor?
1)A constructor is a method which as the same name as that of the class name.
2)A constructor execute automatically when an object is created for a class. memory blocks are build.
3)As the constructor exceute first so all the assignments(initiallization) are done in this.
we have 2 types of constructor.
a)default constructor :- whithout any parameter.
b)parameterized constructor :- with parameter.
4)A constructor doesnot have any return type nor it returns any value.
constructor vs method()
1)A constructor is a method which as the same name as that of the class name but the method can have any name.
2)A constructor execute automatically when an object is created for a class but method has to be called explicitly.
3)A constructor doesnot have any return type nor it returns any value. but a method has return type or void .
4)if we use more than one cunstructor in a program it is known as constructor overloading where as if we use more than one time the method with the same name but different signature it is known as method overloading.
---------------------------------------------------------------------------------
program-12
------------------------
package org.Tuesday;

public class FirstJava 
{
int rollno;      //instance variables or global variables can be accessed through out the class.
String name,address;
FirstJava()
{
	System.out.println("This is a default constructor");
}
FirstJava(int roll,String name,String address)//local variables can be accessed with the methods only
{
	//to differenceat between instance variable and local variables we use this keyword.it points to the 
	//current object  
rollno=roll;
this.name=name;
this.address=address;
}
void display()
{
	System.out.println("The rollno is "+rollno);
	System.out.println("The name is "+name);
	System.out.println("The address is "+address);
	}

}

----------------------------------------------------------------
program-13
----------------------
package org.Tuesday;

public class SecondPrg
{
public static void main(String[] args) 
{
	
FirstJava ob=new FirstJava(101,"sandip","Bangalore");
FirstJava ob1=new FirstJava(102,"Akash","Bangalore");
FirstJava ob2=new FirstJava(103,"Vikash","Bangalore");
FirstJava ob3=new FirstJava(104,"Priyanka","Bangalore");
FirstJava ob4=new FirstJava();
ob.display();
ob1.display();
ob2.display();
ob3.display();
}
}
--------------------------------------------------------------
program-14
-----------------
package org.Tuesday;

public class FirstJava 
{
int rollno;      //instance variables or global variables can be accessed through out the class.
String name,address;//instance variables or global variables can be accessed through out the class.
FirstJava()
{
	System.out.println("This is a default constructor");
}
FirstJava(int rollno,String name,String address)//local variables can be accessed with the methods only
{
	//to differenceat between instance variable and local variables we use this keyword.it points to the 
	//current object  
this.rollno=rollno;
this.name=name;
this.address=address;
}
void display()
{
	System.out.println("The rollno is "+rollno);
	System.out.println("The name is "+name);
	System.out.println("The address is "+address);
	}
int sum(int a,int b)
{//function returns a value where as constructor doesnot return any value
	return a+b;
}
float sum(float a,float b)
{
	return a+b;
}
FirstJava(int a,int b)
{
	System.out.println("the sum of a and b is "+(a+b));
}
}
--------------------------------------------------
program-15
package org.Tuesday;

public class SecondPrg
{
public static void main(String[] args) 
{
FirstJava ob=new FirstJava(101,"sandip","Bangalore");
FirstJava ob1=new FirstJava(102,"Akash","Bangalore");
FirstJava ob2=new FirstJava(103,"Vikash","Bangalore");
FirstJava ob3=new FirstJava(104,"Priyanka","Bangalore");
FirstJava ob4=new FirstJava();//default constructor
FirstJava ob5=new FirstJava(5,8);
System.out.println("the sum is "+ob.sum(5,7)); //with single object we can call n no of methods.
System.out.println("the sum is "+ob.sum(5.5f,7.3f));
ob.display();
ob1.display();
ob2.display();
ob3.display();
}
}
---------------------------------------------------------------
//wap to create a employee class pass the data using constructor
//empno,name,salary,designation.
--------------------------------------------------------------------------
Inheritance 
----------------------------
what is the use of Inheritance ?
Reuse of exixting code and we will add some more features.
Java supports only single inheritance.(single parent)
we have 5 types of inheritance.
1)single inheritance
2)multi-level inheritance
3)hyrarchal inheritance
4)multiple inheritance
5)Hybrid inheritance
------------------------------------------------------------
we use the keyword extends to inherite a parent class into a child class.
we use the keyword super to access the super/parent class variables and methods into the child class.
----------------------------------------------------------------

program-16
----------------------------
package Wednesday;
import java.util.*;
public class FirstJava 
{
int rollno;
String name,address;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name,address");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
}
void display()
{
	System.out.println("the rollno is "+rollno + " the name is "+name+" the address is "+address);
}
}
--------------------------------------------------------
Program-17
--------------------
package Wednesday;
import java.util.*;
public class Second extends FirstJava 
{
int m1,m2,m3,total;
void input()
{
	Scanner ob=new Scanner(System.in);
	super.input();
	System.out.println("enter 2 subject's marks");
	m1=ob.nextInt();
	m2=ob.nextInt();
	m3=ob.nextInt();
}
void display()
{
	super.display();
	System.out.println("m1="+ m1 +"  m2= "+m2+"  m3= "+m3);
	System.out.println("the total is "+(m1+m2+m3));
}
public static void main(String[] args) {
	Second obj=new Second();
	obj.input();
	obj.display();
}
}
--------------------------------------------------------------------------
wap to create a employee class and a department class inheriting it.

employee class :- empno,name,salary,designation

department class :-deptno,deptname,location

create object for department class.display all the details
---------------------------------------------------------------------------------------
Inheritance ---(is -a) relationship 
Has-a relation ship
example :-
Employee has a address
House has a kitchen
----------------------------------------------
program-18
--------------------
package Thrusday;

public class Employee 
{
int empno,salary;
String name;
Address address;
public Employee(int empno, String name, int salary, Address address) 
{
	this.empno = empno;
	this.name = name;
	this.salary = salary;
	this.address = address;
}
void display()
{
	System.out.println("the employee no is "+empno);
	System.out.println("the employee name is "+name);
	System.out.println("the employee salary is "+salary);
	System.out.println("the employee address is "+address);
	}
}
---------------------------------------------------------------------
package Thrusday;

public class Address 
{
int streetno;
String streetname,city,state;
public Address(int streetno, String streetname, String city, String state) 
{
	this.streetno = streetno;
	this.streetname = streetname;
	this.city = city;
	this.state = state;
}
@Override
public String toString() //to convert object to string
{
	return "Address [streetno=" + streetno + ", streetname=" + streetname + ", city=" + city + ", state=" + state + "]";
}

}
-------------------------------------------------------------
package Thrusday;

public class Finalclass 
{
	public static void main(String[] args) {
		Address address=new Address(10,"MG Road","bangalore","karnataka");
		Employee emp=new Employee(101,"sandip",78000,address);
		emp.display();
	}
}
-----------------------------------------------------------------
bank class has a insurance
------------------------------------------
wap to display a bank class having :- accno,name,balance,insurance

Insurance class :- insno,instype,premium
Display the details of bank class.
------------------------------------------------------------------------
OOPs concept
-----------------------
1)class -->variables and methods
2)object -->reference pointer
3)constructor -->default and parameterized
4)inheritance -->for code reuseablity
5)polymerphisim
a)run time ---------------------method overriding(abstract class and interface)
b)compile time----------------method overloading
6)abstraction----------hinding the complexcity and displaying the simplicity.(switching on the fan)
7)encapsulation------protecting the data by using private access specifier. (capsule protect the medecine)
-------------------------------------------------------------------------------------------------------------------------------------------
Example-19
------------------------
package Thrusday;
public class EncapsulationExample 
{
private int accno,pin;
private String name,pass;
public int getAccno() {
	return accno;
}
public void setAccno(int accno) {
	this.accno = accno;
}
public int getPin() {
	return pin;
}
public void setPin(int pin) {
	this.pin = pin;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getPass() {
	return pass;
}
public void setPass(String pass) {
	this.pass = pass;
}

}
--------------------------------------------------
package Thrusday;

public class Accessclass 
{
public static void main(String[] args) {
	EncapsulationExample ob=new EncapsulationExample();
	ob.setAccno(1234);
	ob.setName("Akash");
	ob.setPin(7676);
	ob.setPass("akash123");
	System.out.println("the accno is "+ob.getAccno());
	System.out.println("the name is "+ob.getName());
	System.out.println("the pin is "+ob.getPin());
	System.out.println("the password is "+ob.getPass());
	
}
}
--------------------------------------------------------------
static :- if we declare the variable and methods as static we can access it without creating an object.
Because a single copy of the variables and methods are present in the JVM.
we can declare a variable as static.we can declare a method as static.
we can have a static block.The static block execute before the main method.
we can have a static class but it should be a inner class.
we cannot access non-static variables inside the static method().
we can access static variables inside the non-static method().
static variable's value once incremented remain incremented.

* The main use of staic is for memory management.It saves lot of memory.

example 1:
--------------------
package Friday;
import java.util.*;
public class Test1
{
static int rollno;//global variable or instance variable
static String name,address;//global variable or instance variable
static void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name and address");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
	}
static void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
}
public static void main(String[] args) {
	input();
	display();
	System.out.println("the rollno is "+rollno);
}
}
-------------------------------------------------------------------------------------	
Example -2
---------------------------------
package Friday;
import java.util.*;
public class Test1
{
static int rollno;//global variable or instance variable
static String name,address;//global variable or instance variable
static void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name and address");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
	}
static void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
}
static
{
	System.out.println("this is a static block");
	System.out.println("this execute before the main method");
}
public static void main(String[] args) {
	input();
	display();
	System.out.println("the rollno is "+rollno);
}
}
-------------------------------------------------------------------------
example-3
----------------------
package Friday;
import java.util.*;
public class Test1
{
static int rollno;//global variable or instance variable
static String name,address;//global variable or instance variable
Test1()
{
	System.out.println("this is a default constructor");
}
static void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name and address");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
	}
static void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
}
static
{
	System.out.println("this is a static block");
	System.out.println("this execute before the main method");
}
public static void main(String[] args) {
	Test1 ob=new Test1();
	input();
	display();
	System.out.println("the rollno is "+rollno);
}
}
-------------------------------------------------
example-4
-----------------
package Friday;
import java.util.*;
public class Test1
{
static int rollno;//global variable or instance variable
static String name,address;//global variable or instance variable
Test1()
{
	System.out.println("this is a default constructor");
}
static void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name and address");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
	}
static void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	
}
static
{
	input();
	System.out.println("rollno  :"+rollno);
	System.out.println("this is a static block");
	System.out.println("this execute before the main method");
}
public static void main(String[] args) {
	Test1 ob=new Test1();
	display();
	System.out.println("the rollno is "+ob.rollno);
}
}
------------------------------------------------------------
example-5
---------------------
package Friday;
import java.util.*;
public class Test1
{
 static int rollno;//global variable or instance variable
static String name,address;//global variable or instance variable
static int i;
Test1()
{
	System.out.println("this is a default constructor");
}
static void counter()
{
	i++;
	System.out.println(i);
}
static void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name and address");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
	}
static void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	
}
static
{
	input();
	System.out.println("rollno  :"+rollno);
	System.out.println("this is a static block");
	System.out.println("this execute before the main method");
}
public static void main(String[] args) {
	Test1 ob=new Test1();
	display();
	System.out.println("the rollno is "+ob.rollno);
	counter();
	counter();
	counter();
	counter();
	
}
}
-----------------------------------
Example-6
-------------------
package Friday;
import java.util.*;
public class Test1
{
  int rollno;//global variable or instance variable
 String name,address;//global variable or instance variable
static int i;
Test1()
{
	System.out.println("this is a default constructor");
}
static void counter()
{
	i++;
	System.out.println(i);
}
 void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name and address");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
	}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	
}
static
{
	System.out.println("this is a static block");
	System.out.println("this execute before the main method");
}

}
-----------------------------------------
example-7
--------------------
package Friday;
import java.util.*;
public class Test2 extends Test1
{
	int m1,m2,m3,total;
	 void input1()
	{	super.input();
		 Scanner ob=new Scanner(System.in);
		System.out.println("this is a child function");
		System.out.println("enter 3 subject's marks");
		m1=ob.nextInt();
		m2=ob.nextInt();
		m3=ob.nextInt();
	}
	 
	void display1()
	{
		total=m1+m2+m3;
		System.out.println("the total is "+total);
	}
	public static void main(String[] args) 
	{
		Test2 ob=new Test2();
		ob.input();
		ob.input1();
		ob.display();
		ob.display1();
		System.out.println("the rollno is "+ob.rollno);
		counter();
		counter();
		counter();
		counter();
		
	}
}
-----------------------------------------------------------------
Example-8
----------------------
constructor and inheritance
------------------------------------------
In this the super class constructor will execute first then the subclass constructor.
----------------------------------------------------------------------------------------
package Friday;
public class Inheritance1 
{
int rollno;
String name,address;
 Inheritance1(int rollno, String name, String address) 
{
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
void display()
{
	System.out.println("rollno :"+rollno);
	System.out.println("name :"+name);
	System.out.println("address :"+address);
	}
}
-----------------------------------------------
package Friday;
public class Inheritance2 extends Inheritance1
{
	int phno;
	String email;
	Inheritance2(int rollno, String name, String address, int phno, String email)
	{
		super(rollno, name, address);//first the super class constructor will execute then the sub class
		this.phno = phno;
		this.email = email;
	}
void display()
{
	super.display();
	System.out.println("the phno is "+phno);
	System.out.println("the email is "+email);
}
public static void main(String[] args)
{
	Inheritance2 ob=new Inheritance2(101,"sandip","bangalore",776655,"sandip@gmail.com");
	ob.display();
}

}
--------------------------------------------------------------
wap to enter details of a 
car class having regno,cname,price,type(petrrol/disel)
luxuary car having ac,stereo,safety
use inheritance and constructor and display the details.
create 2 or more objects.
--------------------------------------------------------------------------
Example-9
---------------------
package Friday;
public class GetterSetter 
{
private int empno,salary;
private String name,address;
private Bank bank; 
public Bank getBank() {
	return bank;
}
public void setBank(Bank bank) {
	this.bank = bank;
}
public int getEmpno() {
	return empno;
}
public void setEmpno(int empno) {
	this.empno = empno;
}
public int getSalary() {
	return salary;
}
public void setSalary(int salary) {
	this.salary = salary;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}
}
-------------------------------------------------------------------------
package Friday;

public class Bank 
{
private int accno,bal;
private String loc,IFSC;
public int getAccno() {
	return accno;
}
public void setAccno(int accno) {
	this.accno = accno;
}
public int getBal() {
	return bal;
}
public void setBal(int bal) {
	this.bal = bal;
}
public String getLoc() {
	return loc;
}
public void setLoc(String loc) {
	this.loc = loc;
}
public String getIFSC() {
	return IFSC;
}
public void setIFSC(String iFSC) {
	IFSC = iFSC;
}
@Override
public String toString() {
	return "Bank [accno=" + accno + ", bal=" + bal + ", loc=" + loc + ", IFSC=" + IFSC + "]";
}


}
------------------------------------------------------------------------------
package Friday;

public class Finalclass 
{
public static void main(String[] args) {
	Bank ob=new Bank();
	ob.setAccno(1001);
	ob.setIFSC("SBIN006758");
	ob.setLoc("MG Road");
	ob.setBal(7500);
	GetterSetter ob1=new GetterSetter();
	ob1.setAddress("bangalore");
	ob1.setEmpno(101);
	ob1.setName("sandip");
	ob1.setSalary(78000);
	ob1.setBank(ob);
	System.out.println(ob1.getEmpno());
	System.out.println(ob1.getName());
	System.out.println(ob1.getSalary());
	System.out.println(ob1.getAddress());
	System.out.println(ob1.getBank());
}
}
---------------------------------------------------(Has-A)---------------------------------------------------
wap to enter Student --rollno,name,address,school
School--name,loc,board
and display the data using getter and setter
-----------------------------------------------------------------------
Abstract class and Interface
-----------------------------------------------
abstract class :- It is a incomplete class.It brief us about the application or program.
It contains  abstract methods(method without body) and concret methods(method with body)
abstract  cannot be instanciated(object cannot be created for the class).we have to extend it by a child class and create object for the child class.
we have to override the method 
example:-
abstract class Bank
{
abstract void openAccount();
abstract void deposite();
abstract void applyCreditcard();
abstract void applyDebitcard();
}
class trans exteds Bank
{
}
 -------------------------------------
Example-10
-----------------------------------------------
package Friday;

 abstract class Abstractexample1
{
	abstract void openAccount();
	abstract void deposite();
	abstract void applyCreditcard();//
	abstract void applyDebitcard();
	void login()
	{
	System.out.println("this is login page");
		}
	}
class Abstractexample extends Abstractexample1
{

	@Override      //redefining the method 
	void openAccount() 
	{
		
		System.out.println("this is openaccount");
	}

	@Override
	void deposite() {
		
		System.out.println("deposite");
	}

	@Override
	void applyCreditcard() {
	System.out.println("apply for credit card");
	}

	@Override
	void applyDebitcard() {
		System.out.println("apply for debit card");
			}
	public static void main(String[] args) {                                                                         
		Abstractexample ob=new Abstractexample();
		ob.openAccount();
		ob.applyDebitcard();
		ob.applyCreditcard();
		ob.deposite();
		             ob.login();
			}
}
------------------------------------------------------------------------
Example -11
package Friday;

 abstract class Abstractexample1
{
	abstract void openAccount();
	abstract void deposite();
	abstract void applyCreditcard();
	abstract void applyDebitcard();
	void login()
	{
		System.out.println("this is login page");
	}
	void register()
	{
		System.out.println("This is register");
	}
	}
class Abstractexample extends Abstractexample1
{

	@Override      //redefining the method 
	void openAccount() 
	{
		
		System.out.println("this is openaccount");
	}

	@Override  //we require at least 2 classes .the parent class methods and the child class methods should be same 
	void deposite() {
		
		System.out.println("deposite");
	}

	@Override
	void applyCreditcard() {
	System.out.println("apply for credit card");
	}

	@Override
	void applyDebitcard() {
		System.out.println("apply for debit card");
			}
	void login()
	{
		System.out.println("this is login page in child class");
	}
	int sum(int a,int b)
	{
		return a+b;
	}
	float sum(float a,float b)
	{
		return a+b;
	}
	public static void main(String[] args) {
		Abstractexample ob=new Abstractexample();
		ob.openAccount();
		ob.applyDebitcard();
		ob.applyCreditcard();
		ob.deposite();
		ob.login();
		ob.register();
		System.out.println("the sum is "+ob.sum(4,5));
		System.out.println("the sum is "+ob.sum(4.3f,5.5f));
					}
}

------------------------------------------------------------------
Example-12
package Friday;

 abstract class Abstractexample1
{
	 int a=10,b=20;
	abstract void openAccount(int no);
	abstract void deposite();
	abstract void applyCreditcard();
	abstract void applyDebitcard();
	void login()
	{
		System.out.println("this is login page");
		System.out.println("the sum is "+(a+b));
	}
	void register()
	{
		System.out.println("This is register");
	}
	}
class Abstractexample extends Abstractexample1
{

	@Override      //redefining the method 
	void openAccount(int no) 
	{
		
		System.out.println("this is openaccount for "+no);
	}

	@Override  //we require at least 2 classes .the parent class methods and the child class methods should be same 
	void deposite() {
		
		System.out.println("deposite");
	}

	@Override
	void applyCreditcard() {
	System.out.println("apply for credit card");
	}

	@Override
	void applyDebitcard() {
		System.out.println("apply for debit card");
			}
	void login()
	{
		System.out.println("this is login page in child class");
	}
	int sum(int a,int b)
	{
		return a+b;
	}
	float sum(float a,float b)
	{
		return a+b;
	}
	public static void main(String[] args) {
		Abstractexample ob=new Abstractexample();
		ob.openAccount(101);
		ob.applyDebitcard();
		ob.applyCreditcard();
		ob.deposite();
		ob.login();
		ob.register();
		System.out.println("the sum is "+ob.sum(4,5));
		System.out.println("the sum is "+ob.sum(4.3f,5.5f));
					}
}
-----------------------------------------------------------
wap for a bank transaction using abstract class.
abstract class bank
{
abstract methods like open account,deposite,withdraw
and finally display the balance.
}
------------------------------------------------------------------------- 
Interface :-
It is similar to abstract class but it doesnot have concret methods.
It only have abstract methods.we use the word implements to access the interface.
By interface java supports multiple inheritance.
We donot use the keyword abstract to the methods.
We cannot instanciate an interface.
An interface can extend another interface.
We have to use public access specifier while overriding the abstract methods.
if we declare a variable inside a interface it will be static and final.A final variable has to be assigned and cannot be changed.
--------------------------------
example-13

package saturday;
interface student
{
void getData();
void displayData();
}
interface acadamic
{
	void getMarks();
	void displayMarks();
}
class Interfaceexample implements student,acadamic
{

	@Override
	public void getMarks() {
		System.out.println("the marks is 78");
		
	}

	@Override
	public void displayMarks() {
		System.out.println("The student mark is :78");
		
	}

	@Override
	public void getData() 
	{
		System.out.println("the name is sandip");	
	}

	@Override
	public void displayData() {
	
		System.out.println("the student data is about sandip");
	}
	public static void main(String[] args) {
		Interfaceexample ob=new Interfaceexample();
		ob.getData();
		ob.getMarks();
		ob.displayData();
		ob.displayMarks();
		
	}
}
---------------------------------------------
create a interface employee :- input details(empno,name,address)
			display details()
interface dept:- input details(deptno,name,loc)
			display details()
create a child class to take input and display the details.  
------------------------------------------------------------------------------
Example-14
package saturday;
interface student
{
	int a=10;
void getData1();
}
interface acadamic extends student
{
	void getData();
}
class Interfaceexample implements acadamic 
{
	@Override
	public void getData() {
	System.out.println("This is getData");
			}
	@Override
	public void getData1() {
		System.out.println("This is getData1");
			}
	public static void main(String[] args) {
		Interfaceexample ob=new Interfaceexample();
		ob.getData();
		System.out.println("the value of a is :"+a);
		}
	
}
----------------------------------------------------------------------------
final :- To protect your data.
we can declare a class as final.if we declare class as final we cannot inherite it.
we can declare a variable as final.we have to assign it and it cannot be changed.
we can declare a method as final.if we declare method as final we cannot override it.

-----------------------------------------------------------------------------------------------------------------
example-15
----------------------
package saturday;
public final class FinalExample 
{
	final int a=10;
final void display()
{
	// a=20; not allowed
	System.out.println("this is final method.");
}
public static void main(String[] args) 
{
	int a=30;
	FinalExample ob=new FinalExample();
	ob.display();
	System.out.println("the value of a is "+ob.a);
	System.out.println("the value of a is "+a);
}
}
------------------------------------------------------------------
Exception Handling (error handling)
------------------------------------------------------------
we have 3 types of error
1)compile time
2)logical error
3)runtime error 
* In exception handling we will discuss about only runtime error. 
example:-
1)entering character in place of number.
2)dividing a number by zero.
3)crossing the array limit.
The main aim of exception handling is we don't want the program to terminate in between.the program should display an error message but the flow of the program should be till the end.
  
1)The compile time error is due to spelling mistake.missing of semi-colon,non closing of brases.so we have to manually do the correction.

2)The logical error is due to wrong logic.we have to manually rectify it.

----------------------------------------------------------------------------------------------------------------------  
To handle the runtime exception we have to use 5 keywords.
1)try
2)catch
3)finally
4)throw
5)throws.
--------------------------------------------------------
Example-1
---------------------
package saturday;
import java.util.*;
public class Test 
{
public static void main(String[] args) 
{
	try
	{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 2 nos");
	int a=ob.nextInt();
	int b=ob.nextInt();
	int c=a/b;
	System.out.println("the result is "+c);
	}
	catch(Exception ae)
	{
		System.out.println("the error is "+ae);
	}
	System.out.println("this is end of the program");
}
}
-----------------------
package saturday;
import java.util.*;
public class Test 
{
	public static void main(String[] args) 
	{
		try
		{
			int a[]=new int[5];
			Scanner ob=new Scanner(System.in);
			System.out.println("enter 5 nos");
			for(int i=0;i<5;i++)
				a[i]=ob.nextInt();
			System.out.println(" 5 nos are");
			for(int i=0;i<=5;i++)
				System.out.println(a[i]);
		}
		catch(Exception x)
		{
			x.printStackTrace();
		}
		System.out.println("this is the end of the program");
	}
}
-----------------------------------------
Example-2
try with multiple catch
--------------------------------
package saturday;
import java.util.*;
public class Test 
{
public static void main(String[] args) 
{
	try
	{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 2 nos");
	int a=ob.nextInt();
	int b=ob.nextInt();
	int c=a/b;
	System.out.println("the result is "+c);
	}
		catch(ArithmeticException x)//only ArithmeticException
	{
		System.out.println("the errorr is "+x);
	}
	catch(InputMismatchException x)//only InputMismatchException
	{
		System.out.println("the erroor is "+x);
	}
	catch(Exception x) //handle all type of error
	{
		System.out.println("the error is "+x);
	}
	System.out.println("this is end of the program");
}
}
--------------------------------------------------------------------
try-finally
--------------------
example-3
-----------------------
package saturday;
import java.util.*;
public class Test 
{
public static void main(String[] args) 
{
	try
	{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 2 nos");
	int a=ob.nextInt();
	int b=ob.nextInt();
	int c=a/b;
	System.out.println("the result is "+c);
	}
		finally
		{
			System.out.println("this is end of the program");
		}
	
}
}
---------------------------------------------------------------------------------------
Difference between try-catch and try-finally
--------------------------------------------------------------
If the try is successful then the catch will execute.(means there is runtime error)exmple- 4/0
If the try is un-successful then the catch will not execute.(means no runtime error)example-4/2
------------------------------------------------------------------
If the try is successful or not it does not matter but the finally block will definetly execute.
so we write the connection closing and file closing inside the finally block.
--------------------------------------------------------
example-4
try-catch-finally
----------------------------
package saturday;
import java.util.*;
public class Test 
{
public static void main(String[] args) 
{
	try
	{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 2 nos");
	int a=ob.nextInt();
	int b=ob.nextInt();
	int c=a/b;
	System.out.println("the result is "+c);
	}
	catch(Exception x) //handle all type of error
	{
		System.out.println("the error is "+x);
	}
		finally
		{
			System.out.println("this is end of the program");
		}
	
		}
}
----------------------------------------------------------------------
Nested try block
------------------------------ 
example-5
--------------------
package saturday;
import java.util.*;
public class Test 
{
public static void main(String[] args) 
{
	try
	{
	try
	{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 2 nos");
	int a=ob.nextInt();
	int b=ob.nextInt();
	int c=a/b;
	System.out.println("the result is "+c);
	}
	catch(Exception x) //handle all type of error
	{
		System.out.println("the inner error is "+x);
	}
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 1 no");
	int d=ob.nextInt();
	}
	catch(Exception x) //handle all type of error
	{
		System.out.println("the out error is "+x);
	}
	
		finally
		{
			System.out.println("this is end of the program");
		}
	
		}
}
------------------------------------------------------------------------------------------------------

Finally :- work of finally is same as catch.It will catch the exception.but it will display the system defined error message.It definetly exceute if the try is successful or not it does not matter.
so we write the closing of connestion ,closing of files etc.
-----------------------------
example-6
-------------------------------
package saturday;
import java.util.*;
public class Test 
{
public static void main(String[] args) 
{
	
	try
	{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 2 nos");
	int a=ob.nextInt();
	int b=ob.nextInt();
	int c=a/b;
	System.out.println("the result is "+c);
	}
	catch(Exception x) //handle all type of error
	{
		System.out.println("the inner error is "+x);
	}
	try
	{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 1 no");
	int d=ob.nextInt();
	}
	catch(Exception x) //handle all type of error
	{
		System.out.println("the out error is "+x);
	}
	
		finally
		{
			System.out.println("this is end of the program");
		}
	
		}
}
------------------------------------------------------------------------------------------------------
Exception
------------------------- 
They are 2 types
--------------------------
1)checked exception :-(compulsary)
we have to check the exception then only the program will start execution.
example:- 1)SQLException 2)IOException 3)InterruptedException 3)ServletException etc.

2)unchecked exception:-
This is optional the program will execute but make get exception in between.
example:-1) ArithmeticException 2)ArrayIndexOutOfBound Exception
3)NumberFormatException 4)InputMismatch Exception etc.....
-------------------------------------------------------------------------------------------------
Mostly we use throws Exception to handle the checked Exception.
The super class of exception is Throwable.
throws exception does not have any body.
--------------------------------------------------------------------
example-7
---------------------------------
package saturday;
import java.util.*;
public class Test extends Thread
{
public static void main(String[] args) throws InterruptedException 
{
for(int i=1;i<=10;i++)
{
	System.out.println(i);
	sleep(1000);//it will interupt the flow of control.so we have to check the exception then it will allow to 
}							//execute the program.
}}

--------------------------------------------------------------------
throw exception :- 
This is use to handle the user defined exception.
example:- mark should be greater than zero.
age should be greater than 18 to vote.
salary should be greater than 15k.
---------------------------------------------------------------------------------
example-8
-----------------------
package saturday;
import java.util.*;
public class Test extends Thread
{
public static void main(String[] args) throws Exception  
{
Scanner ob=new Scanner(System.in);
System.out.println("enter your age");
int age=ob.nextInt();
if(age<=18)
{
	throw new Exception("your are not eligible to vote");
}
else
{
	System.out.println("your are eligible to vote");
}
}}
-------------------------------------------------------------------
example-9
---------------------
package saturday;
import java.util.*;
public class Test extends Thread
{
public static void main(String[] args) throws Exception  
{
Scanner ob=new Scanner(System.in);
try
{
System.out.println("enter your age");
int age=ob.nextInt();
if(age<=18)
{
	throw new Exception("your are not eligible to vote");
}
else
{
	System.out.println("your are eligible to vote");
}
}
catch(Exception ae)
{
	ae.printStackTrace();
}
System.out.println("This is throw exception");
}}
-----------------------------------------------------------------------------
String :-
-----------
1)String is a class in java.lang package
2)In java string is also considered as datatype
3)String object is Immutable(cannot be changed)
4)When we assign a value it create a new object and the value remains in memory.
Example :- String s1=“hello”;
 String s2=new String(“hello”);
Method :- length(),isEmpty(),charAt(),equals(),startWith(),endsWith(),indexOf(),lastIndexOf(),toUpperCase(),toLowerCase()
-----------------------------------------------------------------------------------------------------------------------
String Buffer:-
---------------------
1)It is a peer class of string and provides all functions of string.
2)It is mutable (can be modified) and expanded dynamically.
3)It is synchronized
Ex:-1) StringBuffer b=new StringBuffer(“hello”);
We pass “hello” to StringBuffer object “b”
2)StringBuffer b=new StringBuffer(50);
We can store 50 or more character .It is mutable so it expands dynamically
3)StringBuffer b=new StringBuffer()
StringBuffer object b is created with default capacity 16 character.
4)Methods :- append(),insert(),delete(),reverse()
--------------------------------------------------------------------------------------------
String Builder :-
--------------------
1)It is same as String Buffer
2)String Builder is not synchronized
3)String Buffer class takes more time to execute than StringBuilder.
-----------------------------------------------------------------------------------------------
String s1=”sandip”;
String s1=”kumar”;
Now the reference s1 contain new data the old object data is lost.
It is known as unreferenced object and garbage collector will remove it from memory.
---------------------------------------------------------
example-1
-------------------
package First.Friday;
class Firstprg
{	public static void main(String args[])
	{
	String s1="Mphasis and Global soft";
	System.out.println(s1);
	System.out.println(s1.toUpperCase());
	System.out.println(s1.toLowerCase());
	System.out.println(s1.indexOf('a'));
	System.out.println(s1.lastIndexOf('a'));
	System.out.println(s1.substring(5));
	System.out.println(s1.substring(5,10));
	System.out.println(s1.startsWith("Mp"));
	System.out.println(s1.endsWith("ft"));
	System.out.println(s1.replace("soft","software"));
	String ss="Mphasis and Global soft,mumbai";
	System.out.println(ss);
                  System.out.println("the length of string="+ss.length());
	System.out.println(ss.replace("mumbai","Bangalore"));
	char name[]=s1.toCharArray();//convert string to char array
	int leng=name.length;
	System.out.println("length of an array="+leng);
                  for(int i=0;i<leng;i++)
	{
		System.out.println(name[i]);
	}}}
----------------------------------------------------------------------
package First.Friday;

public class Secondprg 
{
	  public static void main(String args[])
	{  int age=25;
	StringBuffer s=new StringBuffer(" She  is ");
	StringBuffer s1=new StringBuffer("Hello to HP ");
	System.out.println("string buffer="+s);
	System.out.println("s append="+s.append(age));
	System.out.println("s append="+s.append(" years old."));
	System.out.println("entire string="+s.toString());//convert object to string
	System.out.println("length="+s.length());
	System.out.println("capacity="+s.capacity());
	System.out.println("s1="+s1);
	System.out.println("charAt="+s1.charAt(1));
	s1.setCharAt(1,'i');
	s1.setLength(5);
	System.out.println("s1="+s1);
	System.out.println("set insert="+s1.insert(5,"welcome"));
	System.out.println("to delete="+s1.delete(5,6));
	System.out.println("to reverse="+s1.reverse());
	System.out.println(s1);
	}}
------------------------------------------------------------
example-2
------------------------
package saturday;
import java.util.*;
public class Test 
{
	public static void main(String[] args) 
	{	
		String s1="apple";
		String s2="apple";
		String s3=new String("apple");
		String s4=new String("apple");
		if(s1==s2) //hashcode or memory blocks are same new memory block will not be created.
			System.out.println("true");
		else
			System.out.println("false");
		
		if(s2==s3)
			System.out.println("true");
		else
			System.out.println("false");
		
		if(s3.equals(s4))//compare the string
			System.out.println("true");
		else
			System.out.println("false");
		
	}}
-----------------------------------------------------
Collection :- It is a collection of Objects.
difference between array and collection :- array size is what we assign.but in collection it grows dynamically.
int a[]=new int[5];
----------------------------------
TreeSet ts=new TreeSet()
ts.add();
-------------------------------------
collection 	is a collection of objects.
---------------------------------------------
example 1:-
-------------------
package saturday;
import java.util.*;
public class Test 
{
	public static void main(String[] args) 
	{	//difference between array and collection
		int a[]=new int[5];//the limit is 5 we can enter 5 elements.
		HashSet ts=new HashSet();//dynamically increase.
		Student1 obj1=new Student1(101,"sandip","bangalore");
		Student1 obj2=new Student1(102,"kiran","bangalore");
						ts.add(obj1);  //collection of object
						ts.add(obj2);
						System.out.println(ts);
					}}
----------------------------------------------------
package saturday;
public class Student1 
{
int rollno;
String name,address;
public Student1(int rollno, String name, String address) {
	super();
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
@Override
public String toString() {
	return "Student [rollno=" + rollno + ", name=" + name + ", address=" + address + "]";
}
}
--------------------------------------------------------------------------------
Collection framework
-----------------------------------------
Collections in java is a framework that provides an architecture to store and manipulate the group of objects.
All the operations that you perform on a data such as searching, sorting, insertion, manipulation, deletion etc. can be performed by Java Collections. 

Java Collection simply means a single unit of objects. Java Collection framework provides many interfaces (Set, List, Queue, Deque,Map) and classes (ArrayList, Vector, LinkedList,HashSet,LinkedHashSet, TreeSet etc).
---------------------------------------------------
array :-  int a[]=new int[5];//array size is assigned
but in collection the size is dynamic.it expands as we enter the elements....
1)set(interface):-(classes)TreeSet,HashSet,LinkedHashSet
2)list (interface):-(classes)LinkedList,ArrayList,Vector,Stack
3)map(interface):-(classes)HashTable,HashMap
4)Queue (interface) maintains the first-in-first-out order.(classes) PriorityQueue, Deque, and ArrayDeque.

1.set(interface)->
Does not allow duplicate value.
HashSet,LinkedHashSet,TreeSet(classes).
a.Hashset->Display elements in random order.
b.LinkedHashSet ->it displays in the same order.
c.TreeSet ->It display in the sorted order.



------------------------------------------------------------------

2.List->
It allows duplicate value.
Stack,ArrayList,Linkedlist,Vector
Stack:FILO .the last element will be arr[0].
Linked List:it displays in same order.
-----------------------------
list iterator is used to view data forward and backward
-----------------------------------------------------------------------------------------
3.Map->
HashMap:-we enter Key and value pair
HashTable:-we enter Key and value pair

*The HashMap class is roughly equivalent to Hashtable, except that it is unsynchronized and permits nulls. 
(HashMap allows null values as key and value whereas Hashtable doesnt allow). 
HashMap does not guarantee that the order of the map will remain constant every time. 
HashMap is unsynchronized and Hashtable is synchronized.

Key-value
key should be unique- but value can be duplicate
-----------------------------------------------------------------------------------------
 note:Iterator,ListIterator and enumeration are interfaces which contains the set of methods. with the help of these methods we can retrieve objects from the collection of classes.
-------------------------------------
Iterator:three methods:hasNext();next();remove();
----------------------------------------------------------------------------------------
Vector is synchronized whereas arraylist is not.
---------------------------------------------------------------------------------------
Example-2
---------------------
package Collection;
import java.util.*;
public class SetExample
{public static void main(String[] args) 
{	ArrayList<Integer> al=new ArrayList<Integer>();
al.add(10);
al.add(50);
al.add(60);
al.add(100);
 al.add(90);
 al.add(80);
System.out.println(al);
al.add(3,500);                 //100 will move next position
System.out.println(al);
al.remove(2);                //remove 60
System.out.println(al);
al.set(4,1000);              //replace 90 with 1000
al.clear();	//remove all the data from the arraylist.
System.out.println(al);}}
----------------------------------------------------------
Wrapper class:- all data types in java are also classes.
1)byte - Byte ----->-128 to 128
2)short - Short --->
3)int - Integer --->- 65789 to +65789
4)long - Long --->
5)float - Float
6)double - Double
7)char - Character
8)boolean -Boolean
9)String
----------------------------
All the wrapper classes have methods they all belongs to lang package.
------------------

package Collection;
public class SetExample
{
	public static void main(String k[]) 
	//public because it has to be used outside the package in JVM
	//we will not create any object to call this main ()
	//void means there is no return
	//main is the function name JVM will do pattern matching
	//String h[] is a array of string arguments that can be taken during run time.
	{
String a=k[0];
String b=k[1];
String c=k[2];
System.out.println(a);
System.out.println(b);
System.out.println(c);
int x=Integer.parseInt(a);
int y=Integer.parseInt(b);
int z=Integer.parseInt(c);
int sum=x+y+z;
System.out.println("the sum is "+sum);
}}
---------------------------------------------------------------------------------
Type casting
---------------------
converting data from one datatype to other.
example :- 
byte a=10; int b=a; (it is called as implecit type casting small memory is converted to bigger memory block)
int a=10;byte b=a;(it is called as explicit type casting bigger memory is converted to smaller memory block)


example 1:
public class Test3
{
public static void main(String[] args) 
{
	byte a=10;
	int b=a;
	System.out.println(b);
}
}
-------------------------------------------------------
example-2
-------------
public class Test3
{
public static void main(String[] args) 
{
	int a=10;
	byte b=(byte)a;
	System.out.println(b);
}
}
-----------------------------------------------------------------
example-3
-----------------------
package Collection;
import java.util.*;
public class SetExample
{
	public static void main(String[] args) {
			HashSet hs=new HashSet();
	   System.out.println(hs.isEmpty());//return boolean value(true)
	   System.out.println(hs.size());
	    hs.add(10);    hs.add(30);    hs.add(40);    hs.add(80);    hs.add(100);     hs.add(10);
	   System.out.println(hs);
	   System.out.println(hs.isEmpty());
	   System.out.println(hs.size());
	   System.out.println(hs.contains(30));
	   System.out.println(hs.contains(300));
	      hs.remove(100);
	   System.out.println(hs);     hs.clear();System.out.println(hs);   System.out.println(hs.size());

}}
-------------------------------------
example-4
-----------------
package Collection;
import java.util.*;
public class SetExample
{
	public static void main(String[] args) {
	HashSet hs=new HashSet();
	    hs.add(10);
	    hs.add(30);
	    hs.add(40);
	    hs.add(80);
	    hs.add(100);
	   System.out.println(hs);
	//To retrieve obj by for each 
	   for(Object obj:hs)  //we are iterating the data by using for each loop.
	{
	   System.out.println(obj);
	  }	}}
----------------------------------------------------------------------------
example-5
-----------------------
package Collection;
import java.util.*;
public class SetExample
{
	public static void main(String[] args) {
		Stack<Integer> ss=new Stack<Integer>();//FILO
	    ss.push(10);
	    ss.push(20);
	    ss.push(30);
	    ss.push(40);
	    ss.push(50);
	    ss.push(60);
	    ss.push(70);
	    ss.push(10);
	System.out.println(ss);
	System.out.println(ss.pop());//remove item from stack
	System.out.println(ss);
	System.out.println(ss.peek());//detect last item in stack but dont delete
	System.out.println(ss);
	System.out.println(ss.search(20));//display the index start from 1
	System.out.println(ss.search(200));//display -1 if not there  
	
	}}
-----------------------------------------------
example-6
--------------------
package Collection;
import java.util.*;
public class SetExample
{
	public static void main(String[] args) {
		LinkedList ll=new LinkedList();
		LinkedList ll1=new LinkedList();
		ll1.add(100);      ll1.add(200);     ll1.add(300);      ll1.add(400);
		ll.add(10);     ll.add(40);      ll.add(20);     ll.add(80);    ll.add(90);      ll.add(50);
		System.out.println(ll1);		  System.out.println(ll);
		ll.addFirst(100);
		System.out.println(ll);
		ll.addLast(200);
		System.out.println(ll);
		ll.removeFirst();
		ll.removeLast();
		System.out.println(ll);
		System.out.println(ll.getFirst());
		System.out.println(ll.getLast());
		ll.addAll(ll1);
		System.out.println(ll);

	}}
-----------------------------------------------------------------
example-7
------------------
package Collection;
import java.util.*;
public class SetExample
{
	public static void main(String[] args) {
		ArrayList<String> list=new ArrayList<String>();
		list.add("Mango");
		list.add("Apple");
		list.add("Banana");
		list.add("Grapes");
		Collections.sort(list);//collection class has static methods like sort to sort the elements .
		Iterator itr=list.iterator();
		while(itr.hasNext())//return boolean value
		{
			System.out.println(itr.next());//returns the next element in the iteration
		}
	}}
-----------------------------------------------------------------
example-8
-----------------------------------------
package Collection;
import java.util.*;
public class SetExample
{
	public static void main(String[] args) {
		LinkedList ll=new LinkedList();
		ll.add(10);ll.add(40);ll.add(20);ll.add(80);ll.add(90);ll.add(50);
		ListIterator ii=ll.listIterator();
		System.out.println("forward direction");
		while(ii.hasNext())
		   {
		     System.out.println(ii.next());
		}
		System.out.println("backward direction");
		while(ii.hasPrevious())
		   {
		     System.out.println(ii.previous());
		}
	}}

----------------------------------------------------------------------------------
Assignment
----------------------
In a cruise there are 3 types of tickets.
1)crew member :- free
2)Adult above 10 years:- Rs 500
3)Children below 10 years :-Rs 250
Enter details of all the passengers and count no of crew members ,Adult and children traveling .
Also display the details of all the travellers.----Using LinkList
--------------------------------------------------------------------------------------------------
Example-9
-------------------------
package Collection;
import java.util.*;
public class SetExample
{
	public static void main(String[] args) {
		Scanner obj=new Scanner(System.in);
	     System.out.println("enter the key and name");
	     int b=obj.nextInt();
	     String st=obj.next();
	     HashMap<Integer,String> hs=new HashMap<Integer,String>();
	     hs.put(1,"raj");
	     hs.put(2,"seetha");
	     hs.put(3,"reeta");
	     System.out.println(hs);
	     hs.put(4,"meetha");
	     hs.put(5,"venu");
	     hs.put(6,"pankaj");
	     hs.put(7,"raj");
	     hs.put(10,"lakshmi");
	     hs.put(10,"Venkatesh");
	     hs.put(b,st);
	     System.out.println(hs);
	}}
-------------------------------------
HashMap :- in this we enter key and value pair.
Set set=hs.entrySet(); //HashMap is converted to set we have entrySet() in HashMap .Returns a Set view of the 			mappings contained in this map 
     Iterator itr=set.iterator();
     while(itr.hasNext())
     {
     Map.Entry en=(Map.Entry)itr.next();//typecasting the next() element with Map.Entry 
     System.out.println(en.getKey()+"   "+en.getValue());//Map.Entry has 2 methods getKey() and getValue()
----------------------------------------------------------------------------------------
for(Map.Entry m:map.entrySet())
----------------------------------------------------
Example:9
----------------------
package Collection;
import java.util.*;
public class SetExample
{
	public static void main(String[] args) {
		 Scanner obj=new Scanner(System.in);
	     System.out.println("enter the key and name");
	     int b=obj.nextInt();
	     String st=obj.next();
	     HashMap<Integer,String> hs=new HashMap<Integer,String>();
	     hs.put(1,"raj");
	     hs.put(2,"seetha");
	     hs.put(3,"reeta");
	     System.out.println(hs);
	     hs.put(4,"meetha");
	     hs.put(5,"venu");
	     hs.put(6,"pankaj");
	     hs.put(7,"raj");
	     hs.put(8,"lakshmi");
	     hs.put(9,"susmita");
	     hs.put(b,st);
	     System.out.println(hs);
	     System.out.println("enter the rollno whose name you want to display");
	     int rollno=obj.nextInt();
	   /*  Set set=hs.entrySet(); 
	     Iterator itr=set.iterator();
	     while(itr.hasNext())
	     {
	     Map.Entry en=(Map.Entry)itr.next();
	     System.out.println(en.getKey()+"   "+en.getValue());
	     }*/
	        
	     for(Map.Entry<Integer, String> entry:hs.entrySet())
	     {    
	         if(rollno==entry.getKey())  
	         {
	        	 System.out.println("The name is "+entry.getValue());
	         }
	         
	     }
	}}
-------------------------------------------------------------------------
Assignment 1:
---------------------
class Book 
{    
int id;    
String name,author,publisher;    
int quantity;    
}
---------------------------------------------------------------
//Creating map of Books with (slno as key and Book as value)   
    Map<Integer,Book> map=new HashMap<Integer,Book>();    
display the book details who's slno is entered.
--------------------------------------------------------------------
Assignment 2:
employee class has address,BankAccount
address class
BankAccount class
create a Map and enter the key and display the employee details with address and Bankdetails.
-----------------------------------------------------------------------------------------------------------------------------------
Thread :-
--------
The thread is a sort of execution of instruction.
In a program it start from public static void main(String arg[])
Statement start executing one after the other.

MultiThread :-
-------------------
In an application that is able to manage and coordinate multiple tasks simultaneously is called concurrent, multithread application.
Multithreaded applications make use of thread switching and scheduling that allow 
multiple threads to make use of system resources.
To create a multithread application we have to implement runnable interface or extends Thread class.
In runnable interface we have one abstract method ->run()
In Thread class we have different methods.

Life cycle of Thread :-
-------------------------
new born thread,
start,
runnable(choose of thread),
running,
block/wait/sleep,
dead

methods of Thread:-
1)getName():-Obtain the thread name.

2)isAlive():- check if a thread is still running.

3)run() :-Entry point for the thread.

4)start():-Start a thread by calling the run method.

5)yield():-this method pauses the currently executing thread temporarily for giving chance to the remaining waiting threads of same priority to execute. if there is no waiting thread or all the waiting thread have a lower
priority then the same thread will continue its execution.

6)join():-The join() method of thread class waits for a thread to die. It is used when you want one thread to wait for completion of another. This process is like a relay race where the second runner waits until the first runner comes and hand over the flag to him.

7)sleep():-Based on our requirement we can make a thread to be in sleeping state 
for a specified period of time.

8)setPriority():-To change the priority of the thread.

9)getPriority() :-To get the thread priority.
MIN_PRIORITY=1 to 4
NORM_PRIORITY=5
MAX_PRIORITY=6 to 10

10)Daemon Thread() :-It is a low priority thread which run in the background doing the garbage collection operation .

11)wait() :-Thread will go to wait until some other thread doesnot notify.

12)notify() :- Wakes up a thread that called wait() on some thread. 

13)notifyAll() :-wakes up all the thread that called wait()on some object.

14)The suspend() method of thread class puts the thread from running to waiting state. This method is used if you want to stop the thread execution and start it again when a certain event occurs. This method allows a thread to temporarily cease execution. The suspended thread can be resumed using the resume() method.

15)The holdLock() method of thread class returns true if the current thread holds the monitor lock on the specified object.

16)Java Thread interrupt() method
The interrupt() method of thread class is used to interrupt the thread. If any thread is in sleeping or waiting state (i.e. sleep() or wait() is invoked) then using the interrupt() method, we can interrupt the thread execution by throwing InterruptedException.

If the thread is not in the sleeping or waiting state then calling the interrupt() method performs a normal behavior and doesn't interrupt the thread but sets the interrupt flag to true.

Synchronization:-
--------------------
When two or more threads need access to a shared resource,  need some way to 
ensure that the resource will be used by only one thread at a time. The process by 
which it is achieved is called synchronization.

DeadLock:-
-------------
When two threads are waiting each other and cannot procced the program is said to 
be deadlock.
------------------------------------------------------------------------------------------------------
Example-1
--------------------
package ThreadExample;
public class Thread1 extends Thread
{
public void run()
{
	for(int i=1;i<=10;i++ )
	{
		System.out.println(i);
		try {
			sleep(1000);
		} 
		catch (InterruptedException e) 
		{
		e.printStackTrace();
		}
	}
}
}
----------------------------------------------------------------------------------------------
package ThreadExample;

public class MainClass 
{
public static void main(String[] args) 
{
Thread1 ob1=new Thread1();
Thread2 ob2=new Thread2();
Thread3 ob3=new Thread3();
ob1.start();//this will call the run method
ob2.start();
ob3.start();
}
}
----------------------------------------------------------------------------------------
* All the run methods will start concurrently.so we have thread switching.
The run method will be called by start().
------------------------------------------------------------------
Example-2
---------------------
package ThreadExample;
public class Thread1 extends Thread
{
public void run()
{
	for(int i=1;i<=10;i++ )
	{
		System.out.println(i);
		try {
			sleep(1000);
		} 
		catch (InterruptedException e) 
		{
		e.printStackTrace();
		}
	}
}
}
------------------------------------------------------
package ThreadExample;

public class MainClass 
{
public static void main(String[] args) 
{
Thread1 ob1=new Thread1();
Thread1 ob2=new Thread1();
Thread1 ob3=new Thread1();
ob1.start();//this will call the run method
ob2.start();
ob3.start();
}
}
----------------------------------------------------------------------
package ThreadExample;

public class MainClass 
{
public static void main(String[] args) 
{
Thread1 ob1=new Thread1();
Thread1 ob2=new Thread1();
Thread1 ob3=new Thread1();
ob1.start();//this will call the run method
System.out.println(ob1.isAlive());	//it returns boolean value
ob2.start();
System.out.println(ob1.isAlive());	//it returns boolean value
ob3.start();
System.out.println(ob1.isAlive());	//it returns boolean value
}
}
--------------------------------------
package ThreadExample;
public class MainClass 
{
public static void main(String[] args) throws InterruptedException 
{
Thread1 ob1=new Thread1();
Thread1 ob2=new Thread1();
Thread1 ob3=new Thread1();
ob1.start();//this will call the run method
System.out.println(ob1.isAlive());	//it returns boolean value
ob2.start();
System.out.println(ob1.isAlive());	//it returns boolean value
ob3.start();
System.out.println(ob1.isAlive());	//it returns boolean value
try  
{    
    ob1.join();    //Waits for this thread to die. Then other threads will work when this thread ob1 is died.
}catch(Exception e){System.out.println(e);}    
System.out.println(ob1.isAlive());	//it returns boolean value
}
}
-------------------------------------------------------------
Example 4:-
-----------------------
join :- after the completion of the current thread the other threads will execute.
-------------
package ThreadExample;

public class MainClass 
{
public static void main(String[] args) throws InterruptedException 
{
Thread1 ob1=new Thread1();
Thread1 ob2=new Thread1();
Thread1 ob3=new Thread1();
ob1.start();//this will call the run method
System.out.println(ob1.isAlive());	//it returns boolean value
try  
{    
    ob1.join();    //when the thread ob1 is died then the thred2 and thread3 will start executing.
}catch(Exception e)
{System.out.println(e);}    
ob2.start();
System.out.println(ob1.isAlive());	//it returns boolean value
ob3.start();
System.out.println(ob1.isAlive());	//it returns boolean value
System.out.println(ob1.isAlive());	//it returns boolean value
System.out.println(ob3.isAlive());	//it returns boolean value
}
}
------------------------------------------------
Example-5
--------------------
package ThreadExample;
public class Thread1 extends Thread
{
	int i;
public void run()
{
	for(i=1;i<=10;i++ )
	{
		System.out.println(Thread.currentThread().getName()+"  "+i); 
		try {
			sleep(1000);
			
		} 
		catch (InterruptedException e) 
		{
		e.printStackTrace();
		}}}}

------------------------------------------
package ThreadExample;
public class MainClass 
{
public static void main(String[] args) throws InterruptedException 
{
Thread1 ob1=new Thread1();
Thread1 ob2=new Thread1();
Thread1 ob3=new Thread1();
ob1.start();//this will call the run method
ob2.start();
ob3.start();
}
}
-----------------------------------------------------------------
Example-6
---------------------
package ThreadExample;

class Second implements Runnable
{
	synchronized public void run() //after the completion of one thread the other thread will execute.
	{
		try
		{
			Thread t=Thread.currentThread();
			String name=t.getName();
			for(int i=0;i<10;i++)
			{
				System.out.println(name+"="+i);
				Thread.sleep(500);
				if(name.equals("raj") && (i==4))
				{
					wait();
				}
				if(name.equals("geeta") && (i==4))
				{
					wait();
				}
				if(name.equals("seeta") && (i==6))
				{
					System.out.println("raj and geeta thread wakes up...");
					notifyAll();

				}
				if(name.equals("raj") && (i==9))
				{
				//	notify();
				}	}
		}catch(Exception e){}
	}
	public static void main(String args[]) throws Exception
	{ 
		Second obj=new Second();
		Thread t1=new Thread(obj,"raj");
		Thread t2=new Thread(obj,"seeta");
		Thread t3=new Thread(obj,"geeta");
		t1.start();
		t2.start();
		t3.start();
	}}
-------------------------------------------------------------

wap to find out who gets the movie tickets out of the 3 friends.
There are 2 movie tickets only.
--------------------------------------------------------------------------------------
example-7
---------------------
package ThreadExample;

class Second implements Runnable
{
	 public void run() {
		for (int i = 1; i <=5; i++) {
			try {
				// thread to sleep for 500 milliseconds
				//Thread.sleep(500);
				System.out.println(Thread.currentThread().getName() +" "+i);
			} catch (Exception e) {
				System.out.println(e);
			}	}	}

	public static void main(String args[]) {
		// creating three threads
		Second obj = new Second();
		Thread t1=new Thread(obj,"Akash");
		Thread t2=new Thread(obj,"Susmita");
		Thread t3=new Thread(obj,"Deepak");
		System.out.println(t1.getPriority()); //default priority is 5
		System.out.println(t2.getPriority());
		System.out.println(t3.getPriority());
		t1.setPriority(10);
		t2.setPriority(4);
		t3.setPriority(1);
		System.out.println(t1.getPriority()); //default priority is 5
		System.out.println(t2.getPriority());
		System.out.println(t3.getPriority());
				// call run() method
		t1.start();
		t2.start();
		t3.start();
		// suspend t2 thread
		t2.suspend();
		t2.resume();
		// call run() method
			}
}
-------------------------------------------------------------------
Files
--------------
File 
---------
It is used to Store and manage data .
Reading or writing of data in a file can be done in byte or character format.
The process of reading and writing object into file is known as serialization.  
The java.io package contain a large number of stream classes that provide capacity 
for processing all types of data.
1)Byte stream class provide support for handling I/O operation on byte.
2)Character stream classes provide support for handling I/O operation on character. 

Stream :-
---------------
Java uses the concept of streams to represent the ordered sequence of data ,
a common character shared by all the input/output device.
A stream in java is a path along which data flows.
It is a sequence of data or bytes traveling from source to destination.
There are 2 types of stream
1)byte stream
------------------
It has 2 abstract class
1)InputStream-read
2)OutputStream-write
-----------------------------------------------------------------------------------------------------
2)character stream
------------------------
There is has 2 abstract class 
1)Reader 2)writer
-----------------------------------------------------------
IO Exception:-
-----------------
1)EOFException
2)FileNotFoundException
3)InterruptedIOException
4)IOException
--------------------
Serialization :- Serialization is the process of writing the data of an object to a
 byte stream.
This is useful when we want to save the state of a program into storage area such 
as file.
Later we restore these object by using deserialization.

Only an Object that implements the serializable interface can be saved and restored 
by the serializable facilities .
The serializable interface have no methods(marker Interface)
The writeObject() method of ObjectOutputStreams used to serialize a object.
The readObject() method of ObjectIntputStreams used to deserialize a object.
Byte Stream:- 

1)BufferInputStream/BufferOutputStream
2)FileInputStream/FileOutputStream
3)ObjectInputStream/ObjectOutputStream
4)DataInputStream/DataOutputStream

------------------------------------------------------------------------------------------------------------------------

Character Stream:-
1)BufferReader/BufferWriter
2)FileReader/FileWriter

------------------------------------------------------------
InputStreamReader/OutputStreamReader  ->bridge from character stream to byte stream.


File class Methods:-

1)boolean isFile():- This method returns true if the file object contains a filename,
otherwise false.

2)booelan isDirectory():-This method returns true if the file object contains a 
directory name.

3)boolean canRead():-This method returns true if the file object contains a file 
which is readable.

4)booelan canWrite():-This method return true if the file is writeable.

5)booelan canExcecute:- This method return true if the file is executable.

6)boolean exists():-This method return true when the file object contains a file 
or directory exists in the computer.

7)String getParent():- This method return the name of parent directory of a file or 
directory.

8)String getAbsolutePath:- this method gives the absolute directory path.

9)long length():- This method returns a  nummber that is the file size in bytes.

10)boolean delete():- This method deletes the file .

11)boolean createNewFile():- This method create a new file if file doesnot exists.

12)boolean mkdir():-this method create the directory .

example:-

import java.io.*;
class FileDemo
{
public static void main(String arg[])
{
String fname=arg[0];
File f=new File(fname);
System.out.println("file name:"+f.getName());
System.out.println("file path:"+f.getPath());
System.out.println("file absolutepath:"+f.getAbsolutePath());
System.out.println("file exists:"+f.exists());
if(f.exists())
{
System.out.println("file canwrite:"+f.canWrite());
System.out.println("file canread:"+f.canRead());
System.out.println("file isdirectory:"+f.isDirectory());
System.out.println("file length:"+f.length());
}}}   
----------------------------------------------------------------------------------------------------------------









































