1)creating table
create table mp192student(empno number,name varchar2(30),address varchar2(30),dob date);

2)insert data into the table
insert into mp192student values(101,'sandip','bangalore','10-jun-1990')
insert into mp192student values(102,'trisha','bangalore','11-jun-1990')
insert into mp192student values(103,'susmita','bangalore','12-jun-1990')

3)to view the table 
select * from mp192student;

4)add a column to the table
alter table mp192student add phoneno number;

5)to add data to that column
update mp192student set phoneno=887766555 where empno=101;

6)to add data to many data to a column
update mp192student set phoneno=887766555 where empno in (102,103);

-------------------------------------------------------
create table mp192result(empno number,name varchar2(30),phy number,chem number,bio number);

insert into mp192result values(101,'akash',78,67,78);
insert into mp192result values(102,'susmita',79,87,78);
insert into mp192result values(103,'trisha',88,87,88);

alter table mp192result add total number;
select * from mp192result;
update mp192result set total=phy+chem+bio;
alter table mp192result add avg number(5,2);-----------------------999.99
update mp192result set avg=total/3;
update mp192result set avg=round(total/3,2);

alter table mp192result add grade varchar2(30);
update mp192result set grade='First Division' where avg >=80;
update mp192result set grade='Secong Division' where avg <80;
---------------------------------------------------------------------------------------------------
Assignement
-------------------------------
Create table employee having accno,name,address,dept,salary,
find ta =10% of salary
find da =20% of salary
find hra =30% of salary
find tax =15% of salary
and gross =salary+ta+da+hra-tax

there should be 10 columns in the tabble.
---------------------------------------------------------------------------------------------------
DATA TYPES:-
-------------------------------
1)number :-size 38 digits   => number(5),number(9,2) to enter float  9999999.99
2)character:-size 2000 bytes =>char(20)
3)varchar2:-4000 bytes =>varchar2(15)
4)date:-7 bytes  =>date  =>'21-jan-2019'
5)long:-2gb
6)raw:-store binary data ,size is 2000 bytes
7)long raw:-2gb
8)lob:-4 gb
9)int,float
10)varchar:-2000 bytes =>varchar(15)
----------------------------------------------------------------------------------
oracle database:-
-------------------------- 
operator :-
---------------------------------------------------------------------------
1)arithmatic operator :-  +,-,*,/                                          

select idno,name,dob,salary+100 from student;

select idno,name,dob,salary*12 from student;

select idno,name,dob,salary/30 from student;

select empid,name,salary+100 as Incrementsalary from student;

select empid,name,salary*12 as Annualsalary from student;

--------------------------------------------------------------------------------------------
2)comparison operator :- =,>=,<=,>,<,!=,<> (not equal to)  

=>select * from student where salary > 6000;

=>select * from student where salary < 6000;

=>select * from student where salary >= 6000;

=>select * from student where salary <> 6000;

=>select * from student where salary != 6000;
----------------------------------------------------------------------------
* select queries are temporary.
--------------------------------------------------------------------------
between and,not between ,in,not in,like,is null  			          

=>select * from emp where sal between 2000 and 4000;
					      
=>select * from emp where deptno in(10,20);
				                      
=>select ename from emp where sal>=1000 and job like '%m';

kiran
=>select name from student where name like '_i%';

=>select name from student where name like '__r%';					     
 =>select * from emp where sal>=1500 and sal<=2500;
					     
 =>select * from emp where sal between 1500 and 2500;

=>select empname,empcode,dob from employee1 where phoneno is null;

=>select * from student where salary is null;
select * from mp192result;

select * from mp192result where total between 222 and 250;
-------------------------------------------------------------------
select * from mp192result where total >240 and name like '%a';//anything starting but end is a.
---------------------------------------------------------
select * from mp192result where total <240 and name like 'a%';//starting with a later anything
-------------------------------------------------------
select * from mp192result where name like '_k%';

select * from mp192result where name like '___s%';

select * from mp192result where name like '__i%';

select * from mp192result where name like '%s%';
-------------------------------------------------------------------------------------------
4)logical operator :-and,or,not                                         

 =>select * from emp where ename='smith' and sal=8000;

==>select empcode,empname ,dob from employee1 where salary >25000 and empname not like '%d';

5)concatenate operator :-  ||

select name||' the rollno is '||rollno from student;

select studentname ||  '  the rollno is  '||idno || ' the salary is '||salary ||' good ' from student;

select name||' got marks in phy is '||phy from mp192result;
-----------------------------------------------------------------------------------------------------
select * from mp192result where name='akash' and total=223;

select * from mp192result where name='akash' or total=244;

select * from mp192result where name='akash' and name not like 's%';

select * from mp192result where name='akash' or name not like 's%';

select name||' got marks in phy is '||phy from mp192result;

select * from mp192result where total is null;

delete from mp192result where empno=103;//particular row will be deleted.
drop is use to drop the table;//the table structure will be also deleted.
truncate table mp192result;//all the data will be deleted but 
the table structure will be present. 

clone a table

select * from mp192result;
select * from mp193result;

create table mp193result as select * from mp192result;

select distinct * from mp192result;
---------------------------------------------------------------------------------------------------------------
contraint in oracle 
-------------------------------
1)primary key :- if you assign a column as primary key we cannot enter duplicate values and we cannot keep the column empty or we cannot enter null value.example :- rollno,accno etc.

2)not null :-if we declare a column as not null ,we cannot enter null value.

3)unique :- if we enter the column as unique we cannot enter duplicate value.We can once enter null value.

4)check :- if we make a column as check means we can give range or condition to that column.
example:-1) salary should be > than 15000. 2)marks should be greater than 5 .....etc.

5)foreign key:-this is a relational key.we can relate one table with other table primary key.There will parent and child relationship.This can contain duplicate records.we cannot delete a row from the parent/master table if it is used in the child table.we cannot make the child orphan.
---------------------------------------------------------------------------------------------------------------------------
example:-
create table mp192stud(empno number primary key,name varchar2(30) not null,phoneno number unique,salary number(9,2) check(salary >15000))

insert into mp192stud(name,empno,salary,phoneno) values('kiran',103,17000,9888766655);

select * from mp192stud;

create table mp192address(empno number references mp192stud,streetno number,sname char(30),city char(30));

insert into mp192address values(101,10,'MG Road','Bangalore');
insert into mp192address values(102,10,'MG Road','Bangalore');
insert into mp192address values(104,10,'MG Road','Bangalore');

delete from mp192stud where empno=101;//we have to delete the child record first then we can delete the parent record.
-----------------------------------------------------------------------------------------------------------
 create bank table :- accno pk,name,balance
create transaction table :- accno fk,trans,amount
--------------------------------------------------------------------------------
example-2
--------------------
CREATE TABLE supplier
( supplier_id numeric(10) not null ,
  supplier_name varchar2(50) not null,
  contact_name varchar2(50),
  CONSTRAINT supplier_pk PRIMARY KEY (supplier_id)
);
---------------------------------------------------------------------------------------------------
CREATE TABLE products
( product_id numeric(10) not null,
  supplier_id numeric(10) not null,
  CONSTRAINT fk_supplier 
    FOREIGN KEY (supplier_id)
    REFERENCES supplier(supplier_id)
    ON DELETE CASCADE
);
---------------------------------------------------------------------------------------
ON DELETE CASCADE :- if we delete the supplier_id from supplier table then all the columns from the products table refered to suppier table supplier_id will be deleted.  
--------------------------------------------------------------------------------------------------
insert into supplier values(103,'akash','akash');
insert into products values(5,102);
select * from products;
select * from supplier;
delete from supplier where supplier_id=101;
-----------------------------------------------------------------------------------------------
composite key:- To make 2 or more column as primary key
--------------------------------
create table studenttable
( rollno number not null
, name varchar2(20) not null
, marks number not null   
, primary key (rollno,name,marks)
, unique (rollno,name)
);
----------------------------------------------
insert into studenttable values(101,'sandip',78);
insert into studenttable values(101,'kiran',78);
insert into studenttable values(102,'kiran',78);
-------------------------------------------
create table details
( rollno number not null
, name varchar2(20) not null
, dob date
, foreign key (rollno,name) references studenttable (rollno,name))
--------------------------------------------------------------------------------------------------------

insert into details values(101,'sandip','1-jul-1995');//allowed

insert into details values(101,'akash','1-jul-1995');//not allowed
----------------------------------------------------------------------------------------------
rename a column and table in oracle:-
------------------------------------------------
column rename
------------------------
alter table details rename column rollno to roll_no;
--------------------------------------------------------------------------
table rename
----------------------------
ALTER TABLE details RENAME TO student_details;  

desc student_details;
---------------------------------------------------------------------------------
autocommit is on (There is automatic commint(save));
-----------------------------------------------------------------------------
SQL Operations
------------------------------------------------------------------------------------------------
1)TL (transaction language) :-select
2)DML(data manipulation langauge) :-insert,update,delete
they are temporary .if we rollback it will come to previous state.
3)DCL (data control language) :-grant,revoke
create user amit identified by oracle;
grant dba to amit;
revoke dba from amit;
4)DDL (data defination language) :-create,alter,drop
5)TCL (Transaction control langauge) :- commit,rollback,savepoint.
-----------------------------------------------------------------------------------------------------
select * from studenttable;

insert into studenttable values(103,'sunil',77);
commit;
once committed we cannot rollback;
rollback;
---------------------------------------------------------
savepoint a1;
rollback to a1;
-------------------------------------------------------------
you should be in system user;
---------------------------------------------------------
create user akash identified by akash;
grant dba to akash;
revoke dba from akash;
drop user akash cascade;
-------------------------------------------------------------------------
system is a admin user;
select * from akash.student;
---------------------------------------------------
 DATE FUNCTION
---------------------------------------------------------------------------------------------------------------------
It is stored as a number in the database and hence one can add number to date ,subtract number to date.
1)select months_between('28-mar-2019','28-feb-2019') from dual;//dummy table 
2)select last_day(sysdate)from dual;
or
2)select last_day('02-feb-2019')from dual;
select sysdate from dual;
3)select to_char(sysdate,'DD Month yyyy HH:MI:SS AM AD') from dual;
To convert date data type to char data type.
-------------------------------------------------------------
4)select * from emp where to_char(hiredate,'D') in (1,2,6); 
(employee who have joined either on sunday,monday,friday)
5)select to_char(sysdate,'Day') from dual;
select to_char(sysdate,'Month') from dual;
select to_char(sysdate,'yyyy') from dual;
select to_char(sysdate,'D') from dual;
6)SELECT NEXT_DAY(SYSDATE, 'SUN') FROM DUAL;
SELECT to_date('5/jan/2014')FROM DUAL;
SELECT to_date('20201231','YYYYMMDD ')FROM DUAL;

select * from emp

SELECT ename, TO_CHAR(hiredate, 'Day') AS "Day" FROM Emp;
SELECT ename, TO_CHAR(hiredate, 'Month') AS "Day" FROM Emp;
SELECT ename, TO_CHAR(hiredate, 'year') AS "Day" FROM Emp;
SELECT ename, TO_CHAR(hiredate, 'yy') AS "Day" FROM Emp;
SELECT ename, TO_CHAR(hiredate, 'D') AS "Day" FROM Emp;
------------------------------------------------------------------------------------------------------

select * from emp order by sal asc;

select * from emp order by sal desc;

SQL AGGREGATE FUNCTION
---------------------------------------------------------------------
Aggregate Functions :-(apply only for column)

1) select sum(sal),avg(sal),max(sal),min(sal),count(sal) from emp;

create table student6(rollno number,name varchar2(15),day number,per number(5,2));

insert into student6(rollno,name,day) values(1,'david',1) ;

select * from student6;

update student6 set per=25/25 *100;
--------------------------------------------------------------------------------------

2)select vsize(empno),vsize(ename) from emp; (memory occupied by column value)

3)select comm,nvl(comm,0) from emp; 
 //null in oracle is not zero.the value is yet to be defined..

4)select * from emp where to_char(hiredate,'D') in (1,2,6); 
(employee who have joined either on sunday,monday,friday)
-------------------------------------------------------------
update mp192stud set dept=10 where empno in(101,102,103);

insert into mp192stud values(104,'akash',8877665544,19000,20);
insert into mp192stud values(105,'ankesh',8876665544,20000,20);
insert into mp192stud values(106,'deepak',8877655544,19000,20);

SELECT COUNT(empno),dept FROM mp192stud GROUP BY dept;

SELECT sum(salary),dept FROM mp192stud GROUP BY dept;

SELECT avg(salary),dept FROM mp192stud GROUP BY dept;

SELECT round(avg(salary),2),dept FROM mp192stud GROUP BY dept;

SELECT max(salary),dept FROM mp192stud GROUP BY dept;

SELECT min(salary),dept FROM mp192stud GROUP BY dept;

The GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) .

SELECT COUNT(empno),name
FROM emp2
GROUP BY name;

//create table employeex(empno number,name varchar2(30),deptno number,salary number);
insert into employeex values(101,'sunil',10,7500);
insert into employeex values(105,'anil',20,6500);
select * from employeex
-------------------------------------------------------------------------------
SELECT COUNT(empno),deptno FROM employeex GROUP BY deptno;
SELECT sum(salary),deptno FROM employeex GROUP BY deptno;
SELECT avg(salary),deptno FROM employeex GROUP BY deptno;
SELECT max(salary),deptno FROM employeex GROUP BY deptno;
SELECT min(salary),deptno FROM employeex GROUP BY deptno;
select job,sum(salary) from emp group by job order by sum(salary);
----------------------------------------------------------------------------------
The SQL HAVING Clause
The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.

select deptno from employeex group by deptno having min(salary) >= 2500;
--------------------------------------------------------------------------------------------------------------------------------------


